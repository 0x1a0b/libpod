---

# Only github users with write-access can define or use encrypted variables
# This credential represents a service account with access to manage both VMs
# and storage.
gcp_credentials: ENCRYPTED[885c6e4297dd8d6f67593c42b810353af0c505a7a670e2c6fd830c56e86bbb2debcc3c18f942d0d46ab36b63521061d4]

# Default timeout for each task
timeout_in: 120m

# Main collection of env. vars to set for all tasks and scripts.
env:
    ####
    #### Global variables used for all tasks
    ####
    # File to update in home-dir with task-specific env. var values
    ENVLIB: ".bash_profile"
    # Overrides default location (/tmp/cirrus) for repo clone
    CIRRUS_WORKING_DIR: "/var/tmp/go/src/github.com/containers/libpod"
    # Required so $ENVLIB gets loaded
    CIRRUS_SHELL: "/bin/bash"
    # Save a little typing (path relative to $CIRRUS_WORKING_DIR)
    SCRIPT_BASE: "./contrib/cirrus"
    PACKER_BASE: "./contrib/cirrus/packer"
    CIRRUS_CLONE_DEPTH: 200
    # Command to prefix every output line with a timestamp
    # (can't do inline awk script, Cirrus-CI or YAML mangles quoting)
    TIMESTAMP: "awk --file ${CIRRUS_WORKING_DIR}/${SCRIPT_BASE}/timestamp.awk"
    BUILT_IMAGE_SUFFIX: "-${CIRRUS_REPO_NAME}-${CIRRUS_BUILD_ID}"

    ####
    #### Cache-image names to test with
    ###
    ACTIVE_CACHE_IMAGE_NAMES: >-
        fedora-29-libpod-548c1c05
        fedora-28-libpod-548c1c05
        ubuntu-18-libpod-548c1c05
        rhel-7-libpod-548c1c05
        image-builder-image-1541772081
    FEDORA_CACHE_IMAGE_NAME: "fedora-29-libpod-5699523102900224"
    PRIOR_FEDORA_CACHE_IMAGE_NAME: "fedora-28-libpod-5699523102900224"
    UBUNTU_CACHE_IMAGE_NAME: "ubuntu-18-libpod-5699523102900224"
    PRIOR_RHEL_CACHE_IMAGE_NAME: "rhel-7-libpod-5699523102900224"
    RHEL_CACHE_IMAGE_NAME: "rhel-8-notready"
    CENTOS_CACHE_IMAGE_NAME: "centos-7-notready"

    ####
    #### Variables for composing new cache-images (used in PR testing) from
    #### base-images (pre-existing in GCE)
    ####
    # Git commits to use while building dependencies into cache-images
    FEDORA_CNI_COMMIT: "412b6d31280682bb4fab4446f113c22ff1886554"
    CNI_COMMIT: "7480240de9749f9a0a5c8614b17f1f03e0c06ab9"
    CRIO_COMMIT: "7a283c391abb7bd25086a8ff91dbb36ebdd24466"
    CRIU_COMMIT: "c74b83cd49c00589c0c0468ba5fe685b67fdbd0a"
    RUNC_COMMIT: "029124da7af7360afa781a0234d1b083550f797c"
    # CSV of cache-image names to build (see $PACKER_BASE/libpod_images.json)
    PACKER_BUILDS: "ubuntu-18,fedora-29,fedora-28,rhel-7"  # TODO: rhel-8,centos-7
    # Version of packer to use
    PACKER_VER: "1.3.2"
    # Special image w/ nested-libvirt + tools for creating new cache and base images
    IMAGE_BUILDER_CACHE_IMAGE_NAME: "image-builder-image-1541772081"
    # Google-maintained base-image names
    UBUNTU_BASE_IMAGE: "ubuntu-1804-bionic-v20181203a"
    CENTOS_BASE_IMAGE: "centos-7-v20181113"
    # Manually produced base-image names (see $SCRIPT_BASE/README.md)
    FEDORA_BASE_IMAGE: "fedora-cloud-base-29-1-2-1541789245"
    PRIOR_FEDORA_BASE_IMAGE: "fedora-cloud-base-28-1-1-1544474897"
    FAH_BASE_IMAGE:  "fedora-atomichost-29-20181025-1-1541787861"
    # RHEL image must be imported, google bills extra for their native image.
    RHEL_BASE_IMAGE: "rhel-guest-image-7-6-210-x86-64-qcow2-1548099756"

    ####
    #### Default to NOT operating in any special-case testing mode
    ####
    SPECIALMODE: "none"  # don't do anything special
    TEST_REMOTE_CLIENT: false  # don't test remote client by default

    ####
    #### Credentials and other secret-sauces, decrypted at runtime when authorized.
    ####
    # Freenode IRC credentials for posting status messages
    IRCID: ENCRYPTED[e87bba62a8e924dc70bdb2b66b16f6ab4a60d2870e6e5534ae9e2b0076f483c71c84091c655ca239101e6816c5ec0883]
    # Command to register a RHEL VM to install/update packages
    RHSM_COMMAND: ENCRYPTED[5caa5ff8c5370c3d25c7a1a28168501ab0fa2e5e3b627926f6eaba02b3fed965a7638a6151657809661f8c905c7dc187]
    # Needed to build GCE images, within a GCE VM
    SERVICE_ACCOUNT: ENCRYPTED[99e9a0b1c23f8dd29e83dfdf164f064cfd17afd9b895ca3b5e4c41170bd4290a8366fe2ad8e7a210b9f751711d1d002a]
    # User ID for cirrus to ssh into VMs
    GCE_SSH_USERNAME: cirrus-ci
    # Name where this repositories cloud resources are located
    GCP_PROJECT_ID: ENCRYPTED[7c80e728e046b1c76147afd156a32c1c57d4a1ac1eab93b7e68e718c61ca8564fc61fef815952b8ae0a64e7034b8fe4f]


# Default VM to use unless set or modified by task
gce_instance:
    image_project: "libpod-218412"
    zone: "us-central1-a"  # Required by Cirrus for the time being
    cpu: 2
    memory: "4Gb"
    disk: 200
    # A matrix could be used here, for now just one VM
    image_name: "${FEDORA_CACHE_IMAGE_NAME}"


# Every *_task runs in parallel in separate VMsd. The name prefix only for reference
# in WebUI, and will be followed by matrix details.  This task gates all others with
# quick format, lint, and unit tests on the standard platform.
gating_task:

    env:
        CIRRUS_WORKING_DIR: "/usr/src/libpod"
        GOSRC: "/go/src/github.com/containers/libpod"

    # Runs within Cirrus's "community cluster"
    container:
        image: "quay.io/libpod/gate:latest"
        cpu: 4
        memory: 12

    timeout_in: 20m

    networking_script:  # Don't bother going further if something is down
        - 'while read host port; do nc -zv -w 13 $host $port || exit 1; done < ${CIRRUS_WORKING_DIR}/${SCRIPT_BASE}/required_host_ports.txt'

    gate_script:
        # N/B: entrypoint.sh resets $GOSRC (same as make clean)
        - '/usr/local/bin/entrypoint.sh install.tools |& ${TIMESTAMP}'
        - '/usr/local/bin/entrypoint.sh validate |& ${TIMESTAMP}'
        - '/usr/local/bin/entrypoint.sh lint |& ${TIMESTAMP}'

    # This task builds Podman with different buildtags to ensure the build does
    # not break.  It also verifies all sub-commands have man pages.
    build_script:
        - '/usr/local/bin/entrypoint.sh podman |& ${TIMESTAMP}'
        - 'cd $GOSRC && ./hack/podman-commands.sh |& ${TIMESTAMP}'
        # N/B: need 'clean' so some commited files are re-generated.
        - '/usr/local/bin/entrypoint.sh clean podman-remote |& ${TIMESTAMP}'
        - '/usr/local/bin/entrypoint.sh clean podman BUILDTAGS="exclude_graphdriver_devicemapper selinux seccomp" |& ${TIMESTAMP}'
        - '/usr/local/bin/entrypoint.sh podman-remote-darwin |& ${TIMESTAMP}'
        - '/usr/local/bin/entrypoint.sh podman-remote-windows |& ${TIMESTAMP}'

    # Verify expected bash environment (-o pipefail)
    pipefail_enabledscript: 'if /bin/false | /bin/true; then echo "pipefail fault" && exit 72; fi'

    on_failure:
        failed_master_script: '$CIRRUS_WORKING_DIR/$SCRIPT_BASE/notice_master_failure.sh'


# This task runs `make vendor` followed by ./hack/tree_status.sh to check
# whether the git tree is clean.  The reasoning for that is to make sure
# that the vendor.conf, the code and the vendored packages in ./vendor are
# in sync at all times.
vendor_task:

    only_if: $CIRRUS_CHANGE_MESSAGE !=~ '.*\*\*\*\s*CIRRUS:\s*TEST\s*IMAGES\s*\*\*\*.*'

    depends_on:
        - "gating"

    env:
        CIRRUS_WORKING_DIR: "/usr/src/libpod"

    # Runs within Cirrus's "community cluster"
    container:
        image: "quay.io/libpod/gate:latest"
        cpu: 4
        memory: 12

    timeout_in: 30m

    vendor_script:
        - '/usr/local/bin/entrypoint.sh .install.vndr |& ${TIMESTAMP}'
        - '/usr/local/bin/entrypoint.sh vendor |& ${TIMESTAMP}'
        - 'cd /go/src/github.com/containers/libpod && ./hack/tree_status.sh |& ${TIMESTAMP}'

    on_failure:
        failed_master_script: '$CIRRUS_WORKING_DIR/$SCRIPT_BASE/notice_master_failure.sh |& ${TIMESTAMP}'


# This task runs `make varlink_api_generate` followed by ./hack/tree_status.sh to check
# whether the git tree is clean.
varlink_api_task:

    only_if: $CIRRUS_CHANGE_MESSAGE !=~ '.*\*\*\*\s*CIRRUS:\s*TEST\s*IMAGES\s*\*\*\*.*'

    depends_on:
        - "gating"

    env:
        CIRRUS_WORKING_DIR: "/usr/src/libpod"
        GOPATH: "/go"
        GOSRC: "/go/src/github.com/containers/libpod"
        # Used by tree_status.sh
        SUGGESTION: 'remove API.md, then "make varlink_api_generate" and commit changes.'

    # Runs within Cirrus's "community cluster"
    container:
        image: "quay.io/libpod/gate:latest"
        cpu: 4
        memory: 12

    timeout_in: 10m

    api_md_script:
        - '/usr/local/bin/entrypoint.sh varlink_api_generate |& ${TIMESTAMP}'
        - 'cd ${GOSRC} && ./hack/tree_status.sh |& ${TIMESTAMP}'

    on_failure:
        failed_master_script: '$CIRRUS_WORKING_DIR/$SCRIPT_BASE/notice_master_failure.sh'


build_each_commit_task:

    depends_on:
        - "gating"
        - "vendor"
        - "varlink_api"

    # $CIRRUS_BASE_BRANCH is only set when testing a PR
    only_if: $CIRRUS_BRANCH != 'master' &&
             $CIRRUS_CHANGE_MESSAGE !=~ '.*\*\*\*\s*CIRRUS:\s*TEST\s*IMAGES\s*\*\*\*.*'

    gce_instance:
        image_project: "libpod-218412"
        zone: "us-central1-a"  # Required by Cirrus for the time being
        cpu: 8
        memory: "8Gb"
        disk: 200
        image_name: "${FEDORA_CACHE_IMAGE_NAME}"

    timeout_in: 30m

    setup_environment_script: '$SCRIPT_BASE/setup_environment.sh |& ${TIMESTAMP}'
    build_each_commit_script:
        - 'git fetch --depth $CIRRUS_CLONE_DEPTH origin $CIRRUS_BASE_BRANCH |& ${TIMESTAMP}'
        - 'env GOPATH=/var/tmp/go/ make build-all-new-commits GIT_BASE_BRANCH=origin/$CIRRUS_BASE_BRANCH |& ${TIMESTAMP}'

    on_failure:
        failed_master_script: '$CIRRUS_WORKING_DIR/$SCRIPT_BASE/notice_master_failure.sh'


# Update metadata on VM images referenced by this repository state
meta_task:

    depends_on:
        - "gating"

    container:
        image: "quay.io/libpod/imgts:latest"  # see contrib/imgts
        cpu: 1
        memory: 1

    env:
        # Space-separated list of images used by this repository state
        IMGNAMES: >-
            ${FEDORA_CACHE_IMAGE_NAME}
            ${PRIOR_FEDORA_CACHE_IMAGE_NAME}
            ${UBUNTU_CACHE_IMAGE_NAME}
            ${PRIOR_RHEL_CACHE_IMAGE_NAME}
            ${RHEL_CACHE_IMAGE_NAME}
            ${PRIOR_CENTOS_CACHE_IMAGE_NAME}
            ${CENTOS_CACHE_IMAGE_NAME}
            ${IMAGE_BUILDER_CACHE_IMAGE_NAME}
        BUILDID: "${CIRRUS_BUILD_ID}"
        REPOREF: "${CIRRUS_CHANGE_IN_REPO}"
        GCPJSON: ENCRYPTED[950d9c64ad78f7b1f0c7e499b42dc058d2b23aa67e38b315e68f557f2aba0bf83068d4734f7b1e1bdd22deabe99629df]
        GCPNAME: ENCRYPTED[b05d469a0dba8cb479cb00cc7c1f6747c91d17622fba260a986b976aa6c817d4077eacffd4613d6d5f23afc4084fab1d]
        GCPPROJECT: ENCRYPTED[7c80e728e046b1c76147afd156a32c1c57d4a1ac1eab93b7e68e718c61ca8564fc61fef815952b8ae0a64e7034b8fe4f]
        CIRRUS_CLONE_DEPTH: 1  # source not used

    timeout_in: 10m

    script: '/usr/local/bin/entrypoint.sh |& ${TIMESTAMP}'


# This task does the unit and integration testing for every platform
testing_task:

    depends_on:
        - "gating"
        - "varlink_api"
        - "vendor"
        - "build_each_commit"

    # Only test build cache-images, if that's what's requested
    only_if: $CIRRUS_CHANGE_MESSAGE !=~ '.*\*\*\*\s*CIRRUS:\s*TEST\s*IMAGES\s*\*\*\*.*'

    gce_instance:
        matrix:
            # Images are generated separately, from build_images_task (below)
            image_name: "${FEDORA_CACHE_IMAGE_NAME}"
            image_name: "${PRIOR_FEDORA_CACHE_IMAGE_NAME}"
            image_name: "${UBUNTU_CACHE_IMAGE_NAME}"

    timeout_in: 120m

    env:
        matrix:
            TEST_REMOTE_CLIENT: true
            TEST_REMOTE_CLIENT: false

    setup_environment_script: '$SCRIPT_BASE/setup_environment.sh |& ${TIMESTAMP}'
    unit_test_script: '$SCRIPT_BASE/unit_test.sh |& ${TIMESTAMP}'
    integration_test_script: '$SCRIPT_BASE/integration_test.sh |& ${TIMESTAMP}'
    ginkgo_node_logs_script: 'cat $CIRRUS_WORKING_DIR/test/e2e/ginkgo-node-*.log || echo "Ginkgo node logs not found"'
    audit_log_script: 'cat /var/log/audit/audit.log || cat /var/log/kern.log'
    journalctl_b_script: 'journalctl -b'

    on_failure:
        failed_master_script: '$CIRRUS_WORKING_DIR/$SCRIPT_BASE/notice_master_failure.sh'
        # Job has already failed, don't fail again and miss collecting data
        failed_ginkgo_node_logs_script: 'cat $CIRRUS_WORKING_DIR/test/e2e/ginkgo-node-*.log || echo "Ginkgo node logs not found"'
        failed_audit_log_script: 'cat /var/log/audit/audit.log || cat /var/log/kern.log || echo "Uh oh, cat audit.log failed"'
        failed_journalctl_b_script: 'journalctl -b || echo "Uh oh, journalctl -b failed"'


# This task executes tests under unique environments/conditions
special_testing_task:

    depends_on:
        - "gating"
        - "varlink_api"
        - "vendor"
        - "build_each_commit"

    only_if: $CIRRUS_CHANGE_MESSAGE !=~ '.*\*\*\*\s*CIRRUS:\s*TEST\s*IMAGES\s*\*\*\*.*'

    env:
        matrix:
            SPECIALMODE: 'rootless'  # See docs
            SPECIALMODE: 'in_podman'  # See docs

    timeout_in: 60m

    setup_environment_script: '$SCRIPT_BASE/setup_environment.sh |& ${TIMESTAMP}'
    integration_test_script: '$SCRIPT_BASE/integration_test.sh |& ${TIMESTAMP}'
    audit_log_script: 'cat /var/log/audit/audit.log || cat /var/log/kern.log'
    journalctl_b_script: 'journalctl -b'

    on_failure:
        failed_master_script: '$CIRRUS_WORKING_DIR/$SCRIPT_BASE/notice_master_failure.sh'
        # Job has already failed, don't fail again and miss collecting data
        failed_audit_log_script: 'cat /var/log/audit/audit.log || cat /var/log/kern.log || echo "Uh oh, cat audit.log failed"'
        failed_journalctl_b_script: 'journalctl -b || echo "Uh oh, journalctl -b failed"'


# Because system tests are stored within the repository, it is sometimes
# necessary to execute them within a PR to validate changes.
optional_testing_task:

    # Only run system tests in PRs (not on merge) if magic string is present
    # in the PR description.  Post-merge system testing is assumed to happen
    # later from OS distribution's build systems.
    only_if: >-
        $CIRRUS_BRANCH != 'master' &&
        $CIRRUS_CHANGE_MESSAGE !=~ '.*\*\*\*\s*CIRRUS:\s*TEST\s*IMAGES\s*\*\*\*.*' &&
        $CIRRUS_CHANGE_MESSAGE =~ '.*\*\*\*\s*CIRRUS:\s*SYSTEM\s*TEST\s*\*\*\*.*'

    gce_instance:
        matrix:
            image_name: "${FEDORA_CACHE_IMAGE_NAME}"
            image_name: "${PRIOR_FEDORA_CACHE_IMAGE_NAME}"
            image_name: "${UBUNTU_CACHE_IMAGE_NAME}"
            image_name: "${PRIOR_RHEL_CACHE_IMAGE_NAME}"
            # image_name: "${RHEL_CACHE_IMAGE_NAME}"
            image_name: "${PRIOR_CENTOS_CACHE_IMAGE_NAME}"
            # image_name: "${CENTOS_CACHE_IMAGE_NAME}"

    timeout_in: 60m

    setup_environment_script: '$SCRIPT_BASE/setup_environment.sh |& ${TIMESTAMP}'
    system_test_script: '$SCRIPT_BASE/system_test.sh |& ${TIMESTAMP}'


# Test building of new cache-images for future PR testing, in this PR.
test_build_cache_images_task:

    only_if: >-
        $CIRRUS_BRANCH != 'master' &&
        $CIRRUS_CHANGE_MESSAGE =~ '.*\*\*\*\s*CIRRUS:\s*TEST\s*IMAGES\s*\*\*\*.*' &&
        $CIRRUS_CHANGE_MESSAGE !=~ '.*\*\*\*\s*CIRRUS:\s*SYSTEM\s*TEST\s*\*\*\*.*'

    depends_on:
        - "gating"

    # VMs created by packer are not cleaned up by cirrus, must allow task to complete
    auto_cancellation: $CI != "true"

    gce_instance:
        image_project: "libpod-218412"
        zone: "us-central1-a"
        cpu: 4
        memory: "4Gb"
        disk: 200
        image_name: "${IMAGE_BUILDER_CACHE_IMAGE_NAME}"
        scopes:  # required for image building
            - compute
            - devstorage.full_control

    environment_script: '$SCRIPT_BASE/setup_environment.sh |& ${TIMESTAMP}'
    build_vm_images_script: '$SCRIPT_BASE/build_vm_images.sh |& ${TIMESTAMP}'


# Test building of new cache-images for future PR testing, in this PR.
verify_test_built_images_task:

    only_if: >-
        $CIRRUS_BRANCH != 'master' &&
        $CIRRUS_CHANGE_MESSAGE =~ '.*\*\*\*\s*CIRRUS:\s*TEST\s*IMAGES\s*\*\*\*.*' &&
        $CIRRUS_CHANGE_MESSAGE !=~ '.*\*\*\*\s*CIRRUS:\s*SYSTEM\s*TEST\s*\*\*\*.*'


    depends_on:
        - "gating"
        - "test_build_cache_images"

    gce_instance:
        matrix:
            # Images are generated separately, from build_images_task (below)
            image_name: "fedora-28${BUILT_IMAGE_SUFFIX}"
            image_name: "fedora-29${BUILT_IMAGE_SUFFIX}"
            image_name: "ubuntu-18${BUILT_IMAGE_SUFFIX}"

    env:
        matrix:
            TEST_REMOTE_CLIENT: true
            TEST_REMOTE_CLIENT: false

    environment_script: '$SCRIPT_BASE/setup_environment.sh |& ${TIMESTAMP}'
    unit_test_script: '$SCRIPT_BASE/unit_test.sh |& ${TIMESTAMP}'
    integration_test_script: '$SCRIPT_BASE/integration_test.sh |& ${TIMESTAMP}'
    rootless_testing_script: '$SCRIPT_BASE/resetup_and_run_rootless.sh |& ${TIMESTAMP}'


# Build new cache-images for future PR testing, but only after a PR merge.
# The cache-images save install/setup time needed test every PR.  The 'active' images
# are selected by the 'image_name' items tasks above.  Currently this requires
# manually updating the names, but this could be automated (see comment below).
build_cache_images_task:
    # Only produce new cache-images after a PR merge, and if a magic string
    # is present in the most recent ___commit-message___.
    only_if: >-
        $CIRRUS_BRANCH == 'master' &&
        $CIRRUS_CHANGE_MESSAGE =~ '.*\*\*\*\s*CIRRUS:\s*REBUILD\s*IMAGES\s*\*\*\*.*'

    # Require tests to pass first.
    depends_on:
        - "gating"
        - "testing"

    # VMs created by packer are not cleaned up by cirrus
    auto_cancellation: $CI != "true"

    gce_instance:
        image_project: "libpod-218412"
        zone: "us-central1-a"  # Required by Cirrus for the time being
        cpu: 4
        memory: "4Gb"
        disk: 200
        image_name: "${IMAGE_BUILDER_CACHE_IMAGE_NAME}"
        # Additional permissions for building GCE images, within a GCE VM
        scopes:
            - compute
            - devstorage.full_control
    environment_script: '$SCRIPT_BASE/setup_environment.sh |& ${TIMESTAMP}'
    build_vm_images_script: '$SCRIPT_BASE/build_vm_images.sh |& ${TIMESTAMP}'

    # TODO,Continuous Delivery: Automatically open a libpod PR after using 'sed' to replace
    #                           the image_names with the new (just build) images.  That will
    #                           cause a new round of testing to happen (via the PR) using
    #                           the new images.  When all is good, the PR may be manually
    #                           merged so all PR testing uses the new images.  The script
    #                           names (below) describe their purpose in this workflow.
    # deploy_images_script:
    #   - clone_podman_release_branch.sh
    #   - modify_cirrus_yaml_image_names.sh
    #   - commit_and_create_upstream_pr.sh

    on_failure:
        failed_master_script: '$CIRRUS_WORKING_DIR/$SCRIPT_BASE/notice_master_failure.sh |& ${TIMESTAMP}'


# Post message to IRC if everything passed
success_task:

    only_if: $CIRRUS_BRANCH != 'master'

    depends_on:  # ignores any dependent task conditions
        - "gating"
        - "build_each_commit"
        - "vendor"
        - "varlink_api"
        - "testing"
        - "special_testing"
        - "optional_testing"
        - "test_build_cache_images"
        - "verify_test_built_images"
        - "build_cache_images"

    env:
        CIRRUS_WORKING_DIR: "/usr/src/libpod"

    container:
        image: "quay.io/libpod/gate:latest"
        cpu: 1
        memory: 1

    success_script: '$SCRIPT_BASE/success.sh |& ${TIMESTAMP}'
